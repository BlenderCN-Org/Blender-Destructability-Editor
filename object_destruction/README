This is an addon under construction. It is licensed as GPL. (or will be, if its
done and stable ;-)

Its purpose is the definition of object decomposition in blender and its 
execution in the blender game engine. The Boolean decomposition method is
in fracture_ops.py which is a slightly modified version of the one distributed
with the "Object fracture addon" by pildanovak.
The Voronoi decomposition method uses the external library voro++, available at
http://math.lbl.gov/voro++/

To use, you need at least blender 2.62, rev 44682. (with bmesh)

BUILD OF voronoi EXTENSION:

to build the voronoi extension, go to libvoro subdirectory and enter
"python setup.py build_ext --inplace", with python3 installed it might be 
necessary to replace "python" by "python3"
under linux the build should run with standard gcc installed,
under windows 7 i have built it with windows 7 sdk 7.0 and msvc 2008 express
installed.
I used the CMDShell of Windows 7 Sdk 7.0, there i entered:

set DISTUTILS_USE_SDK=1
setenv /x64 /release  #needed for 64 bits build, omit /x64 for 32 build
python setup.py build_ext --inplace

If you hit Runtime Error 6034 when loading the addon, then
you need to modify msvc9compiler.py under C:\Python32\Lib\distutils:

comment out line 661: 
         self._remove_visual_c_ref(temp_manifest)

Otherwise this would remove the msvcrt.dll from the manifest and then R6034
would occur.

You also need to insert the __init__.py in the os specific folders, if not 
present. Take the one from the win64 dir, for example.

BUILD OF voronoi EXTENSION with CMake:

in libvoro subdir, open cmake-gui and set source and build dir to current
libvoro subdir, then hit Configure and Generate(Unix makefiles or 
Visual Studio 2008 (32 or 64 bit according to your platform), 
then Linux: make libvoro, Windows: open the Libvoro project and build it)
Under Windows CMake might complain not to find cython, 
in this case enter the path to cython.py manually, e.g. 
C:\Python32\Lib\site-packages\cython.py (after installing Cython there,
installer is available at http://www.lfd.uci.edu/~gohlke/pythonlibs/#cython

Tested under Ubuntu 11.10 64 bit and Windows 7 64 bit.

FEATURES:

working: -Decomposition with different methods (Boolean, Explosion Modifier, 
          Knife tool (only basic with jitter and round cuts, Knife tool defunct
          at the moment)
         -Hierarchical decomposition is possible to
         -Connectivity Calculation (collapses unconnected parts automatically in
          relation to ground objects.
         -Rotated Ground Objects
         -simple undo of decomposition (must be in "editor parenting" mode)
         -basic voronoi decomposition of primitives and voronoi + boolean for 
          monkey and complexer shapes (you must remove non-manifolds manually
          before trying to decompose with voronoi + boolean)
         -hierarchical voronoi decomposition
         -simulated "dead objects"
         -bomb mode with right mouse button (aim to lock on target, hold rmb
          to "charge" and release to detonate (ball is created inside object)
not working yet:
         -normal calculation of parts created by knife tool 
          ->missing surfaces in game engine (irrelevant by now,)
          workaround: disable backface culling in material settings after
          enabling "Blender Game" as renderer

untested: -multiple grounds

to be done additionally: 
          - maybe change from name based system to object ids
          - allow custom child objects in parenting hierarchy
            to build complex shapes which decompose to those 
            objects defined by hand
          - with pre-cubification: use same decomposition of one cube for all
            cubes (with instances)
          - useful integration in blender game engine projects (now done via
            "player" object and logic bricks and destruction_bge.py

BASIC/TESTING USAGE:

         - knife patch not necessary atm, knife tool defunct
         - move the "object_destruction" directory below Blender's 
          "addons_contrib" directory
         - when starting your compiled version of blender, under testing there
           should be an addon "Object->Destructability Editor", enable it
         - under Object tab you should now find a section "Destructability"
         - to decompose: best use the default cube,
           choose a method and part count and hit "Destroy Object"
           for pre-cubification: choose "Intersect with Grid": this creates 
           x*y*z cubes, each one will be further decomposed to the given part 
           count
         - this may take a while depending on part count and method
         - then hit "Setup Player" (at the bottom") 
         - if desired choose "Calculate Ground Connectivity" and determine a
           grid size , used for automatic collapse. 
         - when using connectivity: 
           move the "Ground" object to the bottom of the cube, scale it to the 
           EXACT bottom size, and (IMPORTANT) the UNIFORMLY a bit larger, so it
           roughly intersects the cube's bottom
         - AFTER all has been arranged, hit: "To Game Parenting", this will undo
           parenting and store the parent relation(s) in game properties
           so the game engine can re-parent all (otherwise decomposition in game
           engine would NOT work
         - this takes a while depending on part count and grid size
         - when done: optionally move the "Player" object a little away from 
           the cube
         - start game engine, aim with mouse, move camera with WASD and YX (for 
           up/down), hold left mouse button to increase the fired ball's speed
           and release left mouse button to FIRE! (a ball at the cube)
         - it should be damaged by now ;-)
 
